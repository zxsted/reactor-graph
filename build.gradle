/*
 * Copyright (c) 2011-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


description = 'Reactor-based application framework for the JVM.'

ext {
	gradleVersion = '1.9'
	gradleScriptDir = "${rootProject.projectDir}/gradle"

	// Languages
	groovyVersion = '2.2.1'

	// Logging
	slf4jVersion = '1.7.5'
	logbackVersion = '1.0.13'
	hbcVersion = '1.3.0'

	// Libraries
	reactorVersion = '1.1.0.BUILD-SNAPSHOT'
	siVersion = '3.0.0.M2'
	jacksonDatabindVersion = '2.2.3'
	jsonPathVersion = '0.9.0'
	openHftChronicleVersion = '2.0.2'
	openHftLangVersion = '6.1.1'

	// Testing
	mockitoVersion = '1.9.5'
	spockVersion = '0.7-groovy-2.0'

	// Code coverage
	jacocoVersion = '0.6.2.201302030002'

	javadocLinks = [
			"http://docs.oracle.com/javase/7/docs/api/",
			"http://docs.oracle.com/javaee/6/api/",
			"http://fasterxml.github.com/jackson-core/javadoc/2.2.0/",
			"http://docs.spring.io/spring/docs/3.2.x/javadoc-api/"
	] as String[]
}

buildscript {
	repositories {
		maven { url "http://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.4'
	}
}
apply from: "$gradleScriptDir/setup.gradle"

configure(allprojects) { project ->
	group = 'org.projectreactor.graph'

	apply plugin: 'propdeps'
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply from: "${gradleScriptDir}/ide.gradle"

	[compileJava, compileTestJava]*.options*.compilerArgs = [
			"-Xlint:serial",
			"-Xlint:varargs",
			"-Xlint:cast",
			"-Xlint:classfile",
			"-Xlint:dep-ann",
			"-Xlint:divzero",
			"-Xlint:empty",
			"-Xlint:finally",
			"-Xlint:overrides",
			"-Xlint:path",
			"-Xlint:processing",
			"-Xlint:static",
			"-Xlint:try",
			"-Xlint:-options",     // intentionally disabled
			"-Xlint:-fallthrough", // intentionally disabled
			"-Xlint:-rawtypes",    // TODO enable and fix warnings
			"-Xlint:-deprecation", // TODO enable and fix warnings
			"-Xlint:-unchecked"    // TODO enable and fix warnings
	]

	compileGroovy {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	}

	compileJava {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		compileTestJava.options.compilerArgs += "-parameters"
	}

	sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

	configurations {
		jacoco
	}

	configurations.all {
		exclude group: 'commons-logging'
		exclude module: 'junit'
	}

	test {
		systemProperty("java.awt.headless", "true")
		systemProperty("testGroups", project.properties.get("testGroups"))
		scanForTestClasses = false
		include '**/*Tests.*'
		include '**/*Spec.*'
		exclude '**/*Abstract*.*'
	}

	repositories {
		maven { url 'http://repo.spring.io/libs-snapshot' }
		//mavenLocal()
		mavenCentral()
	}

	// dependencies that are common across all java projects
	dependencies {
		// Logging
		compile "org.slf4j:slf4j-api:$slf4jVersion",
				"org.slf4j:jcl-over-slf4j:$slf4jVersion"

		// JSR-305 annotations
		optional "com.google.code.findbugs:jsr305:2.0.0"

		// Groovy
		testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

		// Testing
		testCompile "org.spockframework:spock-core:$spockVersion",
				"org.hamcrest:hamcrest-library:1.3"
		testRuntime "ch.qos.logback:logback-classic:$logbackVersion"

		// Code coverage
		jacoco "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"
	}
}

configure(subprojects) { subproject ->
	jar {
		manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task groovydocJar(type: Jar) {
		classifier = 'groovydoc'
		from groovydoc
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
		archives groovydocJar
	}

	test {
		testLogging {
			jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=reactor.*"
			events "failed"
			exceptionFormat "full"
		}
	}
}

configure(rootProject) {
	description = "Reactor Graph API"

	configurations.archives.artifacts.clear()

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"

		dependsOn {
			subprojects.collect {
				it.tasks.getByName("jar")
			}
		}
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = "src/api/overview.html"
		options.stylesheetFile = file("src/api/stylesheet.css")
		options.links(project.ext.javadocLinks)

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")

		doFirst {
			classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
		}
	}
}

project('graph-core') {
	description = 'Core Reactor Graph components'

	dependencies {
		// Reactor Core
		compile "org.projectreactor:reactor-core:$reactorVersion"
	}
}

project('graph-examples') {
	description = 'Graph API examples'

	dependencies {
		compile project(":graph-core")

		// Twitter hbc
		compile "com.twitter:hbc-core:$hbcVersion"

		// JSON handling
		optional "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion",
				"com.jayway.jsonpath:json-path:$jsonPathVersion"

		// High-speed Messaging
		//optional "net.openhft:chronicle:$openHftChronicleVersion",
		//"net.openhft:lang:$openHftLangVersion"

		// Serialization
		//optional "com.esotericsoftware.kryo:kryo:$kryoVersion",
		//"com.google.protobuf:protobuf-java:$protobufVersion",
		//"org.xerial.snappy:snappy-java:$snappyVersion"
	}
}

task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
	group = 'Project Setup'
	gradleVersion = "$gradleVersion"
}
